// tslint:disable
/**
 * Cerebot API
 * Cerebot API for use by the web ui or other applications
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Channel
 */
export interface Channel {
    /**
     * 
     * @type {number}
     * @memberof Channel
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof Channel
     */
    twitchRoomId: number;
    /**
     * 
     * @type {boolean}
     * @memberof Channel
     */
    enabled: boolean;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Channel
     */
    joinOnStart?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    commandPrefix?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Channel
     */
    silent?: boolean;
}
/**
 * Command configuration overrides for a channel
 * @export
 * @interface ChannelCommandConfig
 */
export interface ChannelCommandConfig {
    /**
     * 
     * @type {number}
     * @memberof ChannelCommandConfig
     */
    channelId?: number;
    /**
     * 
     * @type {string}
     * @memberof ChannelCommandConfig
     */
    channelName?: string;
    /**
     * Whether the command is active in this channel
     * @type {boolean}
     * @memberof ChannelCommandConfig
     */
    active?: boolean;
    /**
     * Channel specific cooldown setting
     * @type {number}
     * @memberof ChannelCommandConfig
     */
    channelCooldown?: number;
}
/**
 * 
 * @export
 * @interface CommandAttributes
 */
export interface CommandAttributes {
    /**
     * 
     * @type {number}
     * @memberof CommandAttributes
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CommandAttributes
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CommandAttributes
     */
    handlerName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CommandAttributes
     */
    enabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CommandAttributes
     */
    defaultActive?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CommandAttributes
     */
    cooldown?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CommandAttributes
     */
    whisperEnabled?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof CommandAttributes
     */
    aliases?: Array<string>;
}
/**
 * 
 * @export
 * @interface CommandList
 */
export interface CommandList {
    /**
     * 
     * @type {number}
     * @memberof CommandList
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof CommandList
     */
    pageCount: number;
    /**
     * 
     * @type {number}
     * @memberof CommandList
     */
    totalCount: number;
    /**
     * 
     * @type {Array<CommandAttributes>}
     * @memberof CommandList
     */
    items: Array<CommandAttributes>;
}
/**
 * 
 * @export
 * @interface CommandListAllOf
 */
export interface CommandListAllOf {
    /**
     * 
     * @type {Array<CommandAttributes>}
     * @memberof CommandListAllOf
     */
    items: Array<CommandAttributes>;
}
/**
 * 
 * @export
 * @interface CommandTemplate
 */
export interface CommandTemplate {
    /**
     * Content of the template
     * @type {string}
     * @memberof CommandTemplate
     */
    template?: string;
    /**
     * Template context requirements
     * @type {object}
     * @memberof CommandTemplate
     */
    templateContext?: object;
}
/**
 * 
 * @export
 * @interface List
 */
export interface List {
    /**
     * 
     * @type {number}
     * @memberof List
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof List
     */
    pageCount: number;
    /**
     * 
     * @type {number}
     * @memberof List
     */
    totalCount: number;
}
/**
 * 
 * @export
 * @interface NotFound
 */
export interface NotFound {
    /**
     * 
     * @type {string}
     * @memberof NotFound
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof NotFound
     */
    title?: string;
    /**
     * 
     * @type {number}
     * @memberof NotFound
     */
    status?: number;
}
/**
 * 
 * @export
 * @interface Unauthenticated
 */
export interface Unauthenticated {
    /**
     * 
     * @type {string}
     * @memberof Unauthenticated
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Unauthenticated
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Unauthenticated
     */
    details?: string;
    /**
     * 
     * @type {number}
     * @memberof Unauthenticated
     */
    status?: number;
}
/**
 * 
 * @export
 * @interface Unauthorized
 */
export interface Unauthorized {
    /**
     * 
     * @type {string}
     * @memberof Unauthorized
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Unauthorized
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Unauthorized
     */
    details?: string;
    /**
     * 
     * @type {number}
     * @memberof Unauthorized
     */
    status?: number;
}

/**
 * ChannelsApi - axios parameter creator
 * @export
 */
export const ChannelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all bot channels.
         * @summary List channels
         * @param {number} [page] Requested page number
         * @param {number} [perPage] Item per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannels(page?: number, perPage?: number, options: any = {}): RequestArgs {
            const localVarPath = `/channels`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("accessCode", ["openid"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChannelsApi - functional programming interface
 * @export
 */
export const ChannelsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * List all bot channels.
         * @summary List channels
         * @param {number} [page] Requested page number
         * @param {number} [perPage] Item per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannels(page?: number, perPage?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<List & object> {
            const localVarAxiosArgs = ChannelsApiAxiosParamCreator(configuration).getChannels(page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ChannelsApi - factory interface
 * @export
 */
export const ChannelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * List all bot channels.
         * @summary List channels
         * @param {number} [page] Requested page number
         * @param {number} [perPage] Item per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannels(page?: number, perPage?: number, options?: any) {
            return ChannelsApiFp(configuration).getChannels(page, perPage, options)(axios, basePath);
        },
    };
};

/**
 * ChannelsApi - object-oriented interface
 * @export
 * @class ChannelsApi
 * @extends {BaseAPI}
 */
export class ChannelsApi extends BaseAPI {
    /**
     * List all bot channels.
     * @summary List channels
     * @param {number} [page] Requested page number
     * @param {number} [perPage] Item per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    public getChannels(page?: number, perPage?: number, options?: any) {
        return ChannelsApiFp(this.configuration).getChannels(page, perPage, options)(this.axios, this.basePath);
    }

}


/**
 * CommandsApi - axios parameter creator
 * @export
 */
export const CommandsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get details for a bot command.
         * @summary List commands
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommand(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getCommand.');
            }
            const localVarPath = `/commands/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("accessCode", ["openid"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all bot commands.
         * @summary List commands
         * @param {number} [page] Requested page number
         * @param {number} [perPage] Item per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommands(page?: number, perPage?: number, options: any = {}): RequestArgs {
            const localVarPath = `/commands`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("accessCode", ["openid"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommandsApi - functional programming interface
 * @export
 */
export const CommandsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get details for a bot command.
         * @summary List commands
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommand(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommandAttributes & CommandTemplate & object> {
            const localVarAxiosArgs = CommandsApiAxiosParamCreator(configuration).getCommand(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all bot commands.
         * @summary List commands
         * @param {number} [page] Requested page number
         * @param {number} [perPage] Item per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommands(page?: number, perPage?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommandList> {
            const localVarAxiosArgs = CommandsApiAxiosParamCreator(configuration).getCommands(page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CommandsApi - factory interface
 * @export
 */
export const CommandsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get details for a bot command.
         * @summary List commands
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommand(id: number, options?: any) {
            return CommandsApiFp(configuration).getCommand(id, options)(axios, basePath);
        },
        /**
         * List all bot commands.
         * @summary List commands
         * @param {number} [page] Requested page number
         * @param {number} [perPage] Item per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommands(page?: number, perPage?: number, options?: any) {
            return CommandsApiFp(configuration).getCommands(page, perPage, options)(axios, basePath);
        },
    };
};

/**
 * CommandsApi - object-oriented interface
 * @export
 * @class CommandsApi
 * @extends {BaseAPI}
 */
export class CommandsApi extends BaseAPI {
    /**
     * Get details for a bot command.
     * @summary List commands
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandsApi
     */
    public getCommand(id: number, options?: any) {
        return CommandsApiFp(this.configuration).getCommand(id, options)(this.axios, this.basePath);
    }

    /**
     * List all bot commands.
     * @summary List commands
     * @param {number} [page] Requested page number
     * @param {number} [perPage] Item per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandsApi
     */
    public getCommands(page?: number, perPage?: number, options?: any) {
        return CommandsApiFp(this.configuration).getCommands(page, perPage, options)(this.axios, this.basePath);
    }

}


